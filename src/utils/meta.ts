/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–∞-—Ç–µ–≥–∞–º–∏ –∏ SEO
 */

import { env, getMetaUrl } from './env';
import { services } from '../data/services';

export interface MetaData {
  title?: string;
  description?: string;
  image?: string;
  url?: string;
  type?: string;
  keywords?: string;
  price?: string;
  category?: string;
}

export interface ServiceMetaData {
  serviceId?: string;
  category?: string;
  packageName?: string;
  description?: string;
  price?: string;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞-—Ç–µ–≥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export const updateMetaTags = (meta: MetaData) => {
  const {
    title = 'TEXEX ‚Äî –≥–æ—Ç–æ–≤—ã–µ AI-—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ | 60+ —É—Å–ª—É–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ò–ò',
    description = 'ü§ñ –ì–æ—Ç–æ–≤—ã–µ AI-—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞: AI-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —á–∞—Ç-–±–æ—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. 60+ —É—Å–ª—É–≥ –æ—Ç 105,000‚ÇΩ. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
    image = '/lovable-uploads/55ba05a5-2718-4715-9f97-cda517cbf943.png',
    url = env.APP_URL,
    type = 'website',
    keywords = 'AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —á–∞—Ç-–±–æ—Ç—ã, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
  } = meta;

  // –û–±–Ω–æ–≤–ª—è–µ–º title
  document.title = title;

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
  const metaTags = [
    { name: 'description', content: description },
    { name: 'keywords', content: keywords },
    { property: 'og:title', content: title },
    { property: 'og:description', content: description },
    { property: 'og:type', content: type },
    { property: 'og:url', content: url },
    { property: 'og:image', content: getMetaUrl(image) },
    { property: 'og:image:alt', content: 'TEXEX - AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞' },
    { property: 'og:site_name', content: 'TEXEX AI Solutions' },
    { property: 'og:locale', content: 'ru_RU' },
    { name: 'twitter:card', content: 'summary_large_image' },
    { name: 'twitter:title', content: title },
    { name: 'twitter:description', content: description },
    { name: 'twitter:image', content: getMetaUrl(image) },
    { name: 'twitter:site', content: '@texex_ai' },
  ];

  metaTags.forEach(({ name, property, content }) => {
    const selector = name ? `meta[name="${name}"]` : `meta[property="${property}"]`;
    let element = document.querySelector(selector) as HTMLMetaElement;
    
    if (!element) {
      element = document.createElement('meta');
      if (name) element.setAttribute('name', name);
      if (property) element.setAttribute('property', property);
      document.head.appendChild(element);
    }
    
    element.setAttribute('content', content);
  });
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
 */
export const generateServiceMeta = (serviceMeta: ServiceMetaData): MetaData => {
  if (!serviceMeta.serviceId && !serviceMeta.packageName) {
    return {};
  }

  const service = services.find(s =>
    s.packageId === serviceMeta.serviceId ||
    s.packageName === serviceMeta.packageName ||
    s.category === serviceMeta.category
  );

  if (!service) return {};

  const title = `${service.packageName} | TEXEX - AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞`;
  const description = `${service.persuasiveDescription.slice(0, 150)}... –¶–µ–Ω–∞: –æ—Ç ${service.pricingTier1_Price.toLocaleString('ru')}‚ÇΩ. ${service.quantifiableBenefit}`;
  const keywords = [
    service.packageName.toLowerCase(),
    service.category.toLowerCase(),
    service.targetAudience.toLowerCase(),
    'ai —Ä–µ—à–µ–Ω–∏—è',
    '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞',
    '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
  ].join(', ');

  return {
    title,
    description,
    keywords,
    price: service.pricingTier1_Price.toString(),
    category: service.category,
    type: 'product'
  };
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
 */
export const addStructuredData = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  const organizationData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "TEXEX AI Solutions",
    "alternateName": "Texex",
    "url": env.APP_URL,
    "logo": getMetaUrl('/lovable-uploads/55ba05a5-2718-4715-9f97-cda517cbf943.png'),
    "description": "–ö–æ–º–ø–∞–Ω–∏—è TEXEX –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ AI-—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –ë–æ–ª–µ–µ 60 —É—Å–ª—É–≥: AI-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —á–∞—Ç-–±–æ—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
    "foundingDate": "2023",
    "numberOfEmployees": "10-50",
    "industry": "Artificial Intelligence, Business Automation",
    "contactPoint": {
      "@type": "ContactPoint",
      "email": env.CONTACT_EMAIL,
      "telephone": env.CONTACT_PHONE,
      "contactType": "customer service",
      "availableLanguage": ["ru", "en"]
    },
    "address": {
      "@type": "PostalAddress",
      "addressCountry": "RU",
      "addressRegion": "Russia"
    },
    "sameAs": [
      env.TELEGRAM_URL,
      env.WHATSAPP_URL
    ],
    "priceRange": "105000-490000 RUB"
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥
  const servicesData = {
    "@context": "https://schema.org",
    "@type": "ItemList",
    "name": "AI —Ä–µ—à–µ–Ω–∏—è TEXEX",
    "description": "–ö–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞",
    "numberOfItems": services.length,
    "itemListElement": services.map((service, index) => ({
      "@type": "Service",
      "position": index + 1,
      "name": service.packageName,
      "description": service.persuasiveDescription.slice(0, 200),
      "category": service.category,
      "audience": service.targetAudience,
      "provider": {
        "@type": "Organization",
        "name": "TEXEX AI Solutions"
      },
      "offers": {
        "@type": "Offer",
        "price": service.pricingTier1_Price,
        "priceCurrency": "RUB",
        "availability": "https://schema.org/InStock",
        "validFrom": "2024-01-01",
        "priceValidUntil": "2025-12-31"
      },
      "additionalProperty": [
        {
          "@type": "PropertyValue",
          "name": "–¢–∏–ø —É—Å–ª—É–≥–∏",
          "value": service.serviceType
        },
        {
          "@type": "PropertyValue",
          "name": "–†–µ—à–∞–µ–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
          "value": service.coreProblemSolved
        },
        {
          "@type": "PropertyValue",
          "name": "–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
          "value": service.keyDeliverables
        },
        {
          "@type": "PropertyValue",
          "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞",
          "value": service.quantifiableBenefit
        }
      ]
    }))
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
  const breadcrumbData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "–ì–ª–∞–≤–Ω–∞—è",
        "item": env.APP_URL
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "AI —Ä–µ—à–µ–Ω–∏—è",
        "item": `${env.APP_URL}/#services`
      }
    ]
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const scripts = [
    { data: organizationData, id: 'organization-schema' },
    { data: servicesData, id: 'services-schema' },
    { data: breadcrumbData, id: 'breadcrumb-schema' }
  ];

  scripts.forEach(({ data, id }) => {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingScript = document.getElementById(id);
    if (existingScript) {
      existingScript.remove();
    }

    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.id = id;
    script.textContent = JSON.stringify(data);
    document.head.appendChild(script);
  });
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
 */
export const addServiceStructuredData = (serviceId: string) => {
  const service = services.find(s => s.packageId === serviceId);
  if (!service) return;

  const serviceData = {
    "@context": "https://schema.org",
    "@type": "Product",
    "name": service.packageName,
    "description": service.persuasiveDescription,
    "category": service.category,
    "audience": service.targetAudience,
    "brand": {
      "@type": "Brand",
      "name": "TEXEX AI Solutions"
    },
    "offers": {
      "@type": "Offer",
      "price": service.pricingTier1_Price,
      "priceCurrency": "RUB",
      "availability": "https://schema.org/InStock",
      "seller": {
        "@type": "Organization",
        "name": "TEXEX AI Solutions"
      }
    },
    "additionalProperty": [
      {
        "@type": "PropertyValue",
        "name": "–†–µ—à–∞–µ–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
        "value": service.coreProblemSolved
      },
      {
        "@type": "PropertyValue",
        "name": "–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "value": service.keyDeliverables
      },
      {
        "@type": "PropertyValue",
        "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞",
        "value": service.quantifiableBenefit
      },
      {
        "@type": "PropertyValue",
        "name": "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "value": service.example
      }
    ]
  };

  const script = document.createElement('script');
  script.type = 'application/ld+json';
  script.id = `service-${serviceId}-schema`;
  script.textContent = JSON.stringify(serviceData);
  document.head.appendChild(script);
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —É—Å–ª—É–≥
 */
export const generateGlobalKeywords = (): string => {
  const categories = [...new Set(services.map(s => s.category))];
  const commonTerms = [
    'AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
    '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
    '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π',
    '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è'
  ];
  
  const categoryKeywords = categories.map(cat => cat.toLowerCase());
  const serviceKeywords = services.slice(0, 10).map(s => s.packageName.toLowerCase());
  
  return [...commonTerms, ...categoryKeywords, ...serviceKeywords].join(', ');
};
